function stack() {
  let storage = [];
  return {
    get: function () {
      return storage;
    },
    enqueue: function (i) {
      storage.push(i);
      return i;
    },
    dequeue: () => {
      return storage.pop();
    },
  };
}

let myStack = stack();

myStack.enqueue(1);
myStack.enqueue(2);
myStack.enqueue(3);
console.log(myStack.dequeue());
myStack.enqueue(5);
myStack.dequeue();
myStack.enqueue(10);
console.log(myStack.get());

function fib(n) {
  if (n >= 3) return fib(n - 1) + fib(n - 2);
  else return 1;
}

console.log(fib());

var gcd = function (a, b) {
  if (!b) {
    return a;
  }

  return gcd(b, a % b);
};
console.log(gcd(22000, 4420));

var twoSum = function (nums, target) {
  let dictionary = {};
  nums.forEach((num, index) => {
    dictionary[num] = index;
  });

  for (let i = 0; i < nums.length; i++) {
    if (dictionary[target - nums[i]]) {
      if (i !== dictionary[target - nums[i]]) {
        return [i, dictionary[target - nums[i]]];
      }
    }
  }
};

console.log(twoSum([1, 3, 4, 2], 6));


var maximum69Number  = function(num) {
    let maxNum = num
    let numArray = num.toString().split('')
    for(let i = 0; i< numArray.length; i++) {
        let newNum = numArray.slice()
            newNum[i] = 9
        let checkNew = parseInt(newNum.join(''))
        if(checkNew > maxNum) {
            maxNum = checkNew
        }
    }
    return maxNum
};

console.log(maximum69Number(6969))